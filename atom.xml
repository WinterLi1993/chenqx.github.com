<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Chan's blog]]></title>
  <subtitle><![CDATA[Vi Veri Veniversum Vivus Vici]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://chenqx.github.com/"/>
  <updated>2014-11-09T02:40:14.351Z</updated>
  <id>http://chenqx.github.com/</id>
  
  <author>
    <name><![CDATA[Chan]]></name>
    <email><![CDATA[chenqiuxing@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[文本挖掘]]></title>
    <link href="http://chenqx.github.com/2014/11/01/Text-Mining/"/>
    <id>http://chenqx.github.com/2014/11/01/Text-Mining/</id>
    <published>2014-11-01T07:56:48.000Z</published>
    <updated>2014-11-05T14:02:34.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Introduction"><strong><code>Introduction</code></strong></h2>
<hr>
<h3 id="简介_">简介　</h3>
<p>　　在现实世界中，可获取的大部信息是以文本形式存储在文本数据库中的，由来自各种数据源的大量文档组成，如新闻文档、研究论文、书籍、数字图书馆、电子邮件和Web页面。由于电子形式的文本信息飞速增涨，文本挖掘已经成为信息领域的研究热点。<br>　　文本数据库中存储的数据可能是高度非结构化的，如WWW上的网页。也可能是半结构化的，如e-mail消息和一些XML网页：而其它的则可能是良结构化的。良结构化文本数据的典型代表是图书馆数据库中的文档，这些文档可能包含结构字段，如标题、作者、出版日期、长度、分类等等，也可能包含大量非结构化文本成分，如摘要和内容。通常，具有较好结构的文本数据库可以使用关系数据库系统实现，而对非结构化的文本成分需要采用特殊的处理方法对其进行转化。<br>　　文本挖掘(Text Mining)是一个从非结构化文本信息中获取用户感兴趣或者有用的模式的过程。其中被普遍认可的文本挖掘定义如下：文本挖掘是指从大量文本数据中抽取事先未知的、可理解的、最终可用的知识的过程，同时运用这些知识更好地组织信息以便将来参考。<br>　　文本挖掘的主要用途是从原本未经处理的文本中提取出未知的知识，但是文本挖掘也是一项非常困难的工作,因为它必须处理那些本来就模糊而且非结构化的文本数据,所以它是一个多学科混杂的领域,涵盖了信息技术、文本分析、模式识别、统计学、数据可视化、数据库技术、机器学习以及数据挖掘等技术 。文本挖掘是从数据挖掘发展而来，因此其定义与我们熟知的数据挖掘定义相类似。但与传统的数据挖掘相比，文本挖掘有其独特之处，主要表现在:文档本身是半结构化或非结构化的，无确定形式并且缺乏机器可理解的语义;而数据挖掘的对象以数据库中的结构化数据为主，并利用关系表等存储结构来发现知识。因此，有些数据挖掘技术并不适用于文本挖掘，即使可用，也需要建立在对文本集预处理的基础之上。<br>　　文本挖掘是应用驱动的。它在商业智能、信息检索、生物信息处理等方面都有广泛的应用；例如，客户关系管理，自动邮件回复，垃圾邮件过滤，自动简历评审，搜索引擎等等。</p>
<h3 id="基本步骤">基本步骤</h3>
<p>　　有些人把文本挖掘视为另一常用术语文本知识发现(KDD)的同义词，而另一些人只是把文本挖掘视为文本知识发现过程的一个基本步骤。文本知识发现主要由以下步骤组成：</p>
<blockquote>
<ol>
<li>获取文本数据源</li>
<li>文本预处理</li>
<li>挖掘与分析</li>
<li>评估与可视化</li>
</ol>
</blockquote>
<p><img src="http://newtonblogimg.qiniudn.com/textminingflowchart.jpg" alt="Text Mining Flow Chart"><br>　　本篇文章将在接下来的篇幅中，详细的介绍以上几个步骤。</p>
<h2 id="获取文本数据源"><strong><code>获取文本数据源</code></strong></h2>
<hr>
<p>　　各文档数据库，语料库，论文集<br>　　web网页，如通过爬虫抓取，RSS订阅<br>　　<br>　　等</p>
<h2 id="文本预处理"><strong><code>文本预处理</code></strong></h2>
<hr>
<h3 id="文本数据预处理">文本数据预处理</h3>
<p>去标签，去停用词，分词，生成数据集</p>
<h3 id="特征表达">特征表达</h3>
<p>　　<strong>常用表达模型</strong><br>　　特征表达模型种类较多，大体可分为基于集合论的模型、基于代数论的模型和基于概率统计的模型。下面将分别介绍其中比较有代表性和常用的模型。</p>
<h4 id="布尔模型"><em><code>布尔模型</code></em></h4>
<p>　　布尔模型（Bool model）。一个文档表示为文档中出现特征词的集合，也可以表示为一个特征空间上的向量，向量空间的每个分量的权值为0或1。</p>
<blockquote>
<p></p><p style="background:#f1f1f1"><em>例</em><br>　　词条数据集 wordset = [‘love’, ‘have’, ‘dream’]<br>　　文档1： doc_1 = [‘I’, ‘have’, ‘a’, ‘dream’]<br>　　文档2： doc_2= [‘Cats’, ‘love’, ‘fish’]<br>　　那么文档1的布尔模型表达为vector_doc_1 = (0, 1, 0, 1)，同理文档2的布尔模型表达为vector_doc_2 = (0, 1, 0, 0)</p>
</blockquote>
<h4 id="向量空间模型"><em><code>向量空间模型</code></em></h4>
<p>　　向量空间模型（VSM：Vector Space Model） (或者 词组向量模型) 作为向量的标识符（比如索引），是一个用来表示文本文件的代数模型。如词频向量模型，TF/IDF权重模型。</p>
<blockquote>
<p></p><p style="background:#f1f1f1"><em>例</em><br>词频向量模型<br>　　词条数据集 words = [‘love’, ‘have’, ‘dream’]<br>　　文档1： doc_1 = [‘I’, ‘have’, ‘a’, ‘dream’]<br>　　文档2： doc_2= [‘Cats’, ‘love’, ‘fish’]<br>　　那么文档1的布尔模型表达为vector_doc_1 = (0, 1, 0, 1)，同理文档2的布尔模型表达为vector_doc_2 = (0, 1, 0, 0)<br>　　<br>TF/IDF权重模型
　</p>
</blockquote>
<h4 id="Logistic回归模型"><em><code>Logistic回归模型</code></em></h4>
<p>　　基本思想：为了求 P(R=1|Q,D)，定义多个特征函数fi(Q,D),认为求 P(R=1|Q,D)是这些函数的组合。<br>　　通过训练集合拟合得到相应的系数，对于新的文档带入公式得到概率 P。</p>
<h3 id="特征提取">特征提取</h3>
<h4 id="开方检验"><em><code>开方检验</code></em></h4>
<p>　　　</p>
<h4 id="信息增益"><em><code>信息增益</code></em></h4>
<p>　　前文提到过，除了开方检验（CHI）以外，信息增益（IG，Information Gain）也是很有效的特征选择方法。信息增益（Kullback–Leibler divergence）又称information divergence，information gain，relative entropy 或者KLIC。但凡是特征选择，总是在将特征的重要程度量化之后再进行选择，而如何量化特征的重要性，就成了各种方法间最大的不同。开方检验中使用特征与类别间的关联性来进行这个量化，关联性越强，特征得分越高，该特征越应该被保留。<br>　　在信息增益中，衡量标准是看特征能够为分类系统带来多少信息，带来的信息越多，该特征越重要。对一个特征而言，系统有它和没它时信息量将发生变化，而前后信息量的差值就是这个特征给系统带来的信息量。所谓信息量，就是熵。<br>　　假如有变量X，分别是x1，x2，……，xn，每一种取到的概率分别是P1，P2，……，Pn，，那么X的熵就定义为：<br><img src="http://newtonblogimg.qiniudn.com/Entropy.png" alt=""><br>　　也就是说X可能的变化越多，X所携带的信息量越大，熵也就越大。对于文本分类或聚类而言，就是说文档属于哪个类别的变化越多，类别的信息量就越大。所以特征T给聚类C或分类C带来的信息增益为IG(T)=H(C)-H(C|T)。<br>　　H(C|T)包含两种情况：一种是特征T出现，标记为t，一种是特征T不出现，标记为t’。所以H(C|T)=P(t)H(C|t) + P(t’)H(C|t’)，再由熵的计算公式便可推得特征与类别的信息增益公式。<br>　　信息增益最大的问题在于它只能考察特征对整个系统的贡献，而不能具体到某个类别上，这就使得它只适合用来做所谓“全局”的特征选择（指所有的类都使用相同的特征集合），而无法做“本地”的特征选择（每个类别有自己的特征集合，因为有的词，对这个类别很有区分度，对另一个类别则无足轻重）。</p>
<h3 id="特征降维">特征降维</h3>
<h4 id="主成分分析"><em><code>主成分分析</code></em></h4>
<p>　　主成分分析（Principal Component Analysis，PCA）， 将多个变量通过线性变换以选出较少个数重要变量的一种多元统计分析方法。又称主分量分析。在很多情形，变量之间是有一定的相关关系的，当两个变量之间有一定相关关系时，可以解释为这两个变量反映某特征的信息有一定的重叠。PCA通过少数几个主成分来揭示多个变量间的内部结构，即从原始变量中导出少数几个主成分，将许多相关性较高的变量转化成彼此相互独立或不相关的变量，并使它们尽可能多地保留原始变量的信息。
　
　　　
　　　</p>
<h4 id="线性判别分析"><em><code>线性判别分析</code></em></h4>
<p>　　线性判别式分析(Linear Discriminant Analysis, LDA)，也叫做Fisher线性判别(Fisher Linear Discriminant ，FLD)。LDA基本思想是将高维的模式样本投影到最佳鉴别矢量空间，以达到抽取分类信息和压缩特征空间维数的效果，投影后保证模式样本在新的子空间有最大的类间距离和最小的类内距离，即模式在该空间中有最佳的可分离性。因此，它是一种有效的特征抽取方法。使用这种方法能够使投影后模式样本的类间散布矩阵最大，并且同时类内散布矩阵最小。就是说，它能够保证投影后模式样本在新的空间中有最小的类内距离和最大的类间距离，即模式在该空间中有最佳的可分离性。</p>
<h2 id="挖掘与分析"><strong><code>挖掘与分析</code></strong></h2>
<hr>
<h3 id="文本分类与聚类">文本分类与聚类</h3>
<h3 id="信息抽取">信息抽取</h3>
<h3 id="关系抽取">关系抽取</h3>
<h3 id="关联分析">关联分析</h3>
<h2 id="评估与可视化"><strong><code>评估与可视化</code></strong></h2>
<hr>
<h3 id="评估">评估</h3>
<h3 id="可视化">可视化</h3>
<h2 id="Conclusion"><strong><code>Conclusion</code></strong></h2>
<hr>
<h2 id="References"><strong><code>References</code></strong></h2>
<hr>
<p>[1] Ronen Feldman and James Sanger, The Text Mining Handbook, Cambridge University Press.<br>[2] Kao Anne, Poteet, Steve R. (Editors), Natural Language Processing and Text Mining, Springer.</p>
<p><img src="/img/blogImage/pacman.jpg" alt="The End"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Introduction"><strong><code>Introduction</code></strong></h2>
<hr>
<h3 id="简介_">简介　</h3>
<p>　　在现实世界中，可获取的大部信息是以文本形式存储在文本数据库中的，由来自各种数]]>
    </summary>
    
      <category term="Text Mining" scheme="http://chenqx.github.com/tags/Text-Mining/"/>
    
      <category term="NLP" scheme="http://chenqx.github.com/tags/NLP/"/>
    
      <category term="Machine Learning" scheme="http://chenqx.github.com/tags/Machine-Learning/"/>
    
      <category term="Data Mining" scheme="http://chenqx.github.com/categories/Data-Mining/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python读取大文件(GB)]]></title>
    <link href="http://chenqx.github.com/2014/10/29/Python-fastest-way-to-read-a-large-file/"/>
    <id>http://chenqx.github.com/2014/10/29/Python-fastest-way-to-read-a-large-file/</id>
    <published>2014-10-29T02:34:59.000Z</published>
    <updated>2014-11-09T02:37:49.000Z</updated>
    <content type="html"><![CDATA[<p>　　最近处理文本文档时（文件约2GB大小），出现<code>memoryError</code>错误和文件读取太慢的问题，后来找到了两种比较快<code>Large File Reading</code> 的方法，本文将介绍这两种读取方法。</p>
<h2 id="Preliminary"><strong><code>Preliminary</code></strong></h2>
<hr>
<p>　　我们谈到“文本处理”时，我们通常是指处理的内容。Python 将文本文件的内容读入可以操作的字符串变量非常容易。文件对象提供了三个“读”方法： <code>.read()</code>、<code>.readline()</code> 和 <code>.readlines()</code>。每种方法可以接受一个变量以限制每次读取的数据量，但它们通常不使用变量。 <code>.read()</code> 每次读取整个文件，它通常用于将文件内容放到一个字符串变量中。然而 <code>.read()</code> 生成文件内容最直接的字符串表示，但对于连续的面向行的处理，它却是不必要的，并且如果文件大于可用内存，则不可能实现这种处理。下面是<code>read()</code>方法示例：</p>
<figure class="highlight Python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    f = open(<span class="string">'/path/to/file'</span>, <span class="string">'r'</span>)</div><div class="line">    <span class="keyword">print</span> f.read()</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    <span class="keyword">if</span> f:</div><div class="line">        f.close()</div></pre></td></tr></table></figure>

<p>　　调用<code>read()</code>会一次性读取文件的全部内容，如果文件有10G，内存就爆了，所以，要保险起见，可以反复调用<code>read(size)</code>方法，每次最多读取size个字节的内容。另外，调用<code>readline()</code>可以每次读取一行内容，调用<code>readlines()</code>一次读取所有内容并按行返回list。因此，要根据需要决定怎么调用。<br>　　如果文件很小，<code>read()</code>一次性读取最方便；如果不能确定文件大小，反复调用<code>read(size)</code>比较保险；如果是配置文件，调用<code>readlines()</code>最方便：</p>
<figure class="highlight Python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</div><div class="line">    process(line) <span class="comment"># &lt;do something with line&gt;</span></div></pre></td></tr></table></figure>

<h2 id="Read_In_Chunks"><strong><code>Read In Chunks</code></strong></h2>
<hr>
<p>　　处理大文件是很容易想到的就是将大文件分割成若干小文件处理，处理完每个小文件后释放该部分内存。这里用了 <code>iter &amp; yield</code>：</p>
<figure class="highlight Python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_in_chunks</span><span class="params">(filePath, chunk_size=<span class="number">1024</span>*<span class="number">1024</span>)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Lazy function (generator) to read a file piece by piece.</div><div class="line">    Default chunk size: 1M</div><div class="line">    You can set your own chunk size </div><div class="line">    """</div><div class="line">    file_object = open(filePath)</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        chunk_data = file_object.read(chunk_size)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> chunk_data:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        <span class="keyword">yield</span> chunk_data</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line"></div><div class="line">    filePath = <span class="string">'./path/filename'</span></div><div class="line">    <span class="keyword">for</span> chunk <span class="keyword">in</span> read_in_chunks(filePath):</div><div class="line">        process(chunk) <span class="comment"># &lt;do something with chunk&gt;</span></div></pre></td></tr></table></figure>

<h2 id="Using_with_open()"><strong><code>Using</code> <em><code>with open()</code></em></strong></h2>
<hr>
<p>　　<code>with</code>语句打开和关闭文件，包括抛出一个内部块异常。<code>for line in f</code>文件对象<code>f</code>视为一个迭代器，会自动的采用缓冲<code>IO</code>和内存管理，所以你不必担心大文件。</p>
<figure class="highlight Python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#If the file is line based</span></div><div class="line"><span class="keyword">with</span> open(...) <span class="keyword">as</span> f:</div><div class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</div><div class="line">        process(line) <span class="comment"># &lt;do something with line&gt;</span></div></pre></td></tr></table></figure>

<h2 id="Conclusion"><strong><code>Conclusion</code></strong></h2>
<hr>
<p>　　在使用python进行大文件读取时，应该让系统来处理，使用最简单的方式，交给解释器，就管好自己的工作就行了。<br>　　<br><img src="/img/blogImage/pacman.jpg" alt="The End"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　最近处理文本文档时（文件约2GB大小），出现<code>memoryError</code>错误和文件读取太慢的问题，后来找到了两种比较快<code>Large File Reading</code> 的方法，本文将介绍这两种读取方法。</p>
<h2 id="Prel]]>
    </summary>
    
      <category term="Python" scheme="http://chenqx.github.com/tags/Python/"/>
    
      <category term="Python" scheme="http://chenqx.github.com/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java]]></title>
    <link href="http://chenqx.github.com/2014/10/29/Java/"/>
    <id>http://chenqx.github.com/2014/10/29/Java/</id>
    <published>2014-10-29T02:33:37.000Z</published>
    <updated>2014-10-29T02:40:16.000Z</updated>
    <content type="html"><![CDATA[<p>　　Building…</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　Building…</p>
]]>
    </summary>
    
      <category term="Java" scheme="http://chenqx.github.com/tags/Java/"/>
    
      <category term="Java" scheme="http://chenqx.github.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[C/C++]]></title>
    <link href="http://chenqx.github.com/2014/10/29/C-C/"/>
    <id>http://chenqx.github.com/2014/10/29/C-C/</id>
    <published>2014-10-29T02:31:59.000Z</published>
    <updated>2014-10-29T02:45:42.000Z</updated>
    <content type="html"><![CDATA[<p>　　Building…</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　Building…</p>
]]>
    </summary>
    
      <category term="C/C++" scheme="http://chenqx.github.com/tags/C-C/"/>
    
      <category term="C/C++" scheme="http://chenqx.github.com/categories/C-C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Natural Language Processing]]></title>
    <link href="http://chenqx.github.com/2014/10/29/Natural-Language-Processing/"/>
    <id>http://chenqx.github.com/2014/10/29/Natural-Language-Processing/</id>
    <published>2014-10-29T02:31:58.000Z</published>
    <updated>2014-10-29T02:44:54.000Z</updated>
    <content type="html"><![CDATA[<p>　　Building…</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　Building…</p>
]]>
    </summary>
    
      <category term="NLP" scheme="http://chenqx.github.com/tags/NLP/"/>
    
      <category term="NLP" scheme="http://chenqx.github.com/categories/NLP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux]]></title>
    <link href="http://chenqx.github.com/2014/10/29/Linux/"/>
    <id>http://chenqx.github.com/2014/10/29/Linux/</id>
    <published>2014-10-29T02:31:58.000Z</published>
    <updated>2014-10-29T02:47:36.000Z</updated>
    <content type="html"><![CDATA[<p>　　Building…</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　Building…</p>
]]>
    </summary>
    
      <category term="Linux" scheme="http://chenqx.github.com/tags/Linux/"/>
    
      <category term="Linux" scheme="http://chenqx.github.com/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Data Base]]></title>
    <link href="http://chenqx.github.com/2014/10/29/Data-Base/"/>
    <id>http://chenqx.github.com/2014/10/29/Data-Base/</id>
    <published>2014-10-29T02:31:58.000Z</published>
    <updated>2014-11-09T02:39:49.000Z</updated>
    <content type="html"><![CDATA[<p>　　Building…</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　Building…</p>
]]>
    </summary>
    
      <category term="Database" scheme="http://chenqx.github.com/tags/Database/"/>
    
      <category term="Database" scheme="http://chenqx.github.com/categories/Database/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Machine Learning]]></title>
    <link href="http://chenqx.github.com/2014/10/29/Machine-Learning/"/>
    <id>http://chenqx.github.com/2014/10/29/Machine-Learning/</id>
    <published>2014-10-29T02:31:57.000Z</published>
    <updated>2014-10-29T02:42:52.000Z</updated>
    <content type="html"><![CDATA[<p>　　Building…</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　Building…</p>
]]>
    </summary>
    
      <category term="Machine Learning" scheme="http://chenqx.github.com/tags/Machine-Learning/"/>
    
      <category term="Machine Learning" scheme="http://chenqx.github.com/categories/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[简明 Vim 练级攻略]]></title>
    <link href="http://chenqx.github.com/2014/10/28/Learn-Vim-Progressively/"/>
    <id>http://chenqx.github.com/2014/10/28/Learn-Vim-Progressively/</id>
    <published>2014-10-28T10:11:03.000Z</published>
    <updated>2014-11-05T14:03:16.000Z</updated>
    <content type="html"><![CDATA[<p>　　vim的学习曲线相当的大<a href="http://coolshell.cn/articles/3125.html" target="_blank" rel="external">（参看各种文本编辑器的学习曲线）</a>，所以，如果你一开始看到的是一大堆VIM的命令分类，你一定会对这个编辑器失去兴趣的。下面的文章翻译自<a href="http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/" target="_blank" rel="external">《Learn Vim Progressively》</a>，我觉得这是给新手最好的VIM的升级教程了，没有列举所有的命令，只是列举了那些最有用的命令。非常不错。</p>
<hr>
<p>　　你想以最快的速度学习人类史上最好的文本编辑器VIM吗？你先得懂得如何在VIM幸存下来，然后一点一点地学习各种戏法。</p>
<p>　　Vim the Six Billion Dollar editor</p>
<blockquote>
<ul>
<li>Better, Stronger, Faster.</li>
</ul>
</blockquote>
<p>学习 vim 并且其会成为你最后一个使用的文本编辑器。没有比这个更好的文本编辑器了，非常地难学，但是却不可思议地好用。<br>　　我建议下面这四个步骤：</p>
<blockquote>
<ol>
<li>存活</li>
<li>感觉良好</li>
<li>觉得更好，更强，更快</li>
<li>使用VIM的超能力</li>
</ol>
</blockquote>
<p>　　当你走完这篇文章，你会成为一个vim的 superstar。在开始学习以前，我需要给你一些警告：</p>
<blockquote>
<ul>
<li>学习vim在开始时是痛苦的。</li>
<li>需要时间</li>
<li>需要不断地练习，就像你学习一个乐器一样。</li>
<li>不要期望你能在3天内把vim练得比别的编辑器更有效率。</li>
<li>事实上，你需要2周时间的苦练，而不是3天。</li>
</ul>
</blockquote>
<hr>
<h2 id="1st_Level_–_Survive"><strong>1st Level – Survive</strong></h2>
<p>　　1. 安装 <a href="http://www.vim.org/docs.php" target="_blank" rel="external">Vim</a><br>　　2. 启动 Vim<br>　　3. <strong>什么也别干！请先阅读</strong></p>
<p>　　当你安装好一个编辑器后，你一定会想在其中输入点什么东西，然后看看这个编辑器是什么样子。但vim不是这样的，请按照下面的命令操作：
　　</p>
<blockquote>
<ul>
<li>启 动Vim后，vim在 Normal 模式下。</li>
<li>让我们进入 Insert 模式，请按下键 i。(你会看到vim左下角有一个–insert–字样，表示，你可以以插入的方式输入了）</li>
<li>此时，你可以输入文本了，就像你用“记事本”一样。</li>
<li>如果你想返回 Normal 模式，请按 ESC 键</li>
</ul>
</blockquote>
<p>　　现在，你知道如何在 Insert 和 Normal 模式下切换了。下面是一些命令，可以让你在 Normal 模式下幸存下来：</p>
<blockquote>
<ul>
<li>i → Insert 模式，按 ESC 回到 Normal 模式.</li>
<li>x → 删当前光标所在的一个字符。</li>
<li>:wq → 存盘 + 退出 (:w 存盘, :q 退出)   （陈皓注：:w 后可以跟文件名）</li>
<li>dd → 删除当前行，并把删除的行存到剪贴板里</li>
<li><p>p → 粘贴剪贴板<br><strong>推荐:</strong></p>
</li>
<li><p>hjkl (强例推荐使用其移动光标，但不必需) →你也可以使用光标键 (←↓↑→). 注: j 就像下箭头。</p>
</li>
<li>:help <command> → 显示相关命令的帮助。你也可以就输入 :help 而不跟命令。（陈皓注：退出帮助需要输入:q）</li>
</ul>
</blockquote>
<p>　　你能在vim幸存下来只需要上述的那5个命令，你就可以编辑文本了，你一定要把这些命令练成一种下意识的状态。于是你就可以开始进阶到第二级了。</p>
<p>　　但是，在你进入第二级时，需要再说一下 Normal 模式。在一般的编辑器下，当你需要copy一段文字的时候，你需要使用 Ctrl 键，比如：Ctrl-C。也就是说，Ctrl键就好像功能键一样，当你按下了功能键Ctrl后，C就不在是C了，而且就是一个命令或是一个快键键了，在VIM的Normal模式下，所有的键就是功能键了。这个你需要知道。<br>　　<br>　　标记:</p>
<blockquote>
<ul>
<li>下面的文字中，如果是 Ctrl-λ我会写成 ＜C-λ＞.</li>
<li>以 : 开始的命令你需要输入 <enter>回车，例如 — 如果我写成 :q 也就是说你要输入 :q＜enter＞.</enter></li>
</ul>
</blockquote>
<hr>
<h2 id="2nd_Level_–_Feel_comfortable"><strong>2nd Level – Feel comfortable</strong></h2>
<p>　　上面的那些命令只能让你存活下来，现在是时候学习一些更多的命令了，下面是我的建议：（陈皓注：所有的命令都需要在Normal模式下使用，如果你不知道现在在什么样的模式，你就狂按几次ESC键）</p>
<h3 id="各种插入模式">各种插入模式</h3>
<blockquote>
<ul>
<li>a → 在光标后插入</li>
<li>o → 在当前行后插入一个新行</li>
<li>O → 在当前行前插入一个新行</li>
<li>cw → 替换从光标所在位置后到一个单词结尾的字符</li>
</ul>
</blockquote>
<h3 id="简单的移动光标">简单的移动光标</h3>
<blockquote>
<ul>
<li>0 → 数字零，到行头</li>
<li>^ → 到本行第一个不是blank字符的位置（所谓blank字符就是空格，tab，换行，回车等）</li>
<li>$ → 到本行行尾</li>
<li>g_ → 到本行最后一个不是blank字符的位置。</li>
<li>/pattern → 搜索 pattern 的字符串（如果搜索出多个匹配，可按n键到下一个）</li>
</ul>
</blockquote>
<h3 id="拷贝/粘贴">拷贝/粘贴</h3>
<blockquote>
<ul>
<li>P → 粘贴（陈皓注：p/P都可以，p是表示在当前位置之后，P表示在当前位置之前）</li>
<li>yy → 拷贝当前行当行于 ddP</li>
</ul>
</blockquote>
<h3 id="简单的移动光标-1">简单的移动光标</h3>
<blockquote>
<ul>
<li>u → undo</li>
<li><c-r> → redo</c-r></li>
</ul>
</blockquote>
<h3 id="打开/保存/退出/改变文件">打开/保存/退出/改变文件</h3>
<blockquote>
<ul>
<li>:e <path to="" file=""> → 打开一个文件</li>
<li>:w → 存盘</li>
<li>:saveas <path to="" file=""> → 另存为 <path to="" file=""></li>
<li>:x， ZZ 或 :wq → 保存并退出 (:x 表示仅在需要时保存，ZZ不需要输入冒号并回车)</li>
<li>:q! → 退出不保存 :qa! 强行退出所有的正在编辑的文件，就算别的文件有更改。</li>
<li>:bn 和 :bp → 你可以同时打开很多文件，使用这两个命令来切换下一个或上一个文件。（陈皓注：我喜欢使用:n到下一个文件）</li>
</ul>
</blockquote>
<p>　　花点时间熟悉一下上面的命令，一旦你掌握他们了，你就几乎可以干其它编辑器都能干的事了。但是到现在为止，你还是觉得使用vim还是有点笨拙，不过没关系，你可以进阶到第三级了。</p>
<hr>
<h2 id="3rd_Level_–_Better_Stronger_Faster"><strong>3rd Level – Better Stronger Faster</strong></h2>
<p>　　先恭喜你！你干的很不错。我们可以开始一些更为有趣的事了。在第三级，我们只谈那些和vi可以兼容的命令。</p>
<h3 id="更好">更好</h3>
<p>　　下面，让我们看一下vim是怎么重复自己的：</p>
<blockquote>
<ul>
<li>. → (小数点) 可以重复上一次的命令</li>
<li>N<command> → 重复某个命令N次<br>　　下面是一个示例，找开一个文件你可以试试下面的命令：</li>
<li>2dd → 删除2行</li>
<li>3p → 粘贴文本3次<br>100idesu [ESC] → 会写下 “desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu “</li>
<li>. → 重复上一个命令—— 100 “desu “.</li>
<li><ol>
<li>→ 重复 3 次 “desu” (注意：不是 300，你看，VIM多聪明啊).</li>
</ol>
</li>
</ul>
</blockquote>
<h3 id="更强">更强</h3>
<p>　　你要让你的光标移动更有效率，你一定要了解下面的这些命令，千万别跳过。</p>
<blockquote>
<ol>
<li>NG → 到第 N 行 （注意命令中的G是大写的，另我一般使用 : N 到第N行，如 :137 到第137行）</li>
<li>gg → 到第一行。（相当于1G，或 :1）</li>
<li>G → 到最后一行。</li>
<li>按单词移动：<blockquote>
<p>　　w → 到下一个单词的开头。<br>　　e → 到下一个单词的结尾。<br>　　&gt; 如果你认为单词是由默认方式，那么就用小写的e和w。默认上来说，　　　一个单词由字母，数字和下划线组成（程序变量）<br>　　&gt; 如果你认为单词是由blank字符分隔符，那么你需要使用大写的E和W。　　（程序语句）<br>　　<img src="http://newtonblogimg.qiniudn.com/word_moves.jpg" alt="Word Moves"></p>
</blockquote>
</li>
</ol>
</blockquote>
<p>　　下面，让我来说说最强的光标移动：</p>
<blockquote>
<ul>
<li>% : 匹配括号移动，包括 (, {, [. （你需要把光标先移到括号上）</li>
<li>* 和 #:  匹配光标当前所在的单词，移动光标到下一个（或上一个）匹配单词（*是下一个，#是上一个）</li>
</ul>
</blockquote>
<p>　　相信我，上面这三个命令对程序员来说是相当强大的。</p>
<h3 id="更快">更快</h3>
<p>　　你一定要记住光标的移动，因为很多命令都可以和这些移动光标的命令连动。很多命令都可以如下来干：＜start position＞＜command＞＜end position＞</p>
<p>　　例如 0y$ 命令意味着：</p>
<blockquote>
<ul>
<li>0 → 先到行头</li>
<li>y → 从这里开始拷贝</li>
<li>$ → 拷贝到本行最后一个字符</li>
<li>你可可以输入 ye，从当前位置拷贝到本单词的最后一个字符。</li>
</ul>
</blockquote>
<p>　　你也可以输入 y2/foo 来拷贝2个 “foo” 之间的字符串。</p>
<p>　　还有很多时间并不一定你就一定要按y才会拷贝，下面的命令也会被拷贝：</p>
<blockquote>
<ul>
<li>d (删除 )</li>
<li>v (可视化的选择)</li>
<li>gU (变大写)</li>
<li>gu (变小写)</li>
<li>等等<br>（可视化选择是一个很有意思的命令，你可以先按v，然后移动光标，你就会看到文本被选择，然后，你可能d，也可y，也可以变大写等）</li>
</ul>
</blockquote>
<hr>
<h2 id="4th_Level_–_Vim_Superpowers"><strong>4th Level – Vim Superpowers</strong></h2>
<p>　　你只需要掌握前面的命令，你就可以很舒服的使用VIM了。但是，现在，我们向你介绍的是VIM杀手级的功能。下面这些功能是我只用vim的原因。</p>
<h3 id="在当前行上移动光标">在当前行上移动光标</h3>
<blockquote>
<p>0 → 到行头<br>^ → 到本行的第一个非blank字符<br>$ → 到行尾<br>g_ → 到本行最后一个不是blank字符的位置。<br>fa → 到下一个为a的字符处，你也可以fs到下一个为s的字符。<br>t, → 到逗号前的第一个字符。逗号可以变成其它字符。<br>3fa → 在当前行查找第三个出现的a。<br>F 和 T → 和 f 和 t 一样，只不过是相反方向。<br><img src="http://newtonblogimg.qiniudn.com/line_moves.jpg" alt="Line Moves"></p>
</blockquote>
<p>　　还有一个很有用的命令是 dt” → 删除所有的内容，直到遇到双引号—— “。</p>
<h3 id="区域选择">区域选择</h3>
<p>　　在visual 模式下，这些命令很强大，其命令格式为&lt;　action&gt;a&lt;　object&gt; 和 &lt;　action&gt;i&lt;　object&gt;</p>
<blockquote>
<ul>
<li>action可以是任何的命令，如 d (删除), y (拷贝), v (可以视模式选择)。</li>
<li>object 可能是： w 一个单词， W 一个以空格为分隔的单词， s 一个句字， p 一个段落。也可以是一个特别的字符：”、 ‘、 )、 }、 ]。</li>
</ul>
</blockquote>
<p>　　假设你有一个字符串 (map (+) (“foo”)).而光标键在第一个 o 的位置。</p>
<blockquote>
<ul>
<li>vi” → 会选择 foo.</li>
<li>va” → 会选择 “foo”.</li>
<li>vi) → 会选择 “foo”.</li>
<li>va) → 会选择(“foo”).</li>
<li>v2i) → 会选择 map (+) (“foo”)</li>
<li>v2a) → 会选择 (map (+) (“foo”))<br><img src="http://newtonblogimg.qiniudn.com/textobjects.png" alt="Text Objects"></li>
</ul>
</blockquote>
<h3 id="块操作">块操作</h3>
<p>　　块操作，典型的操作： 0 &lt; C-v&gt; &lt; C-d&gt; I— [ESC]</p>
<blockquote>
<ul>
<li>^ → 到行头</li>
<li>&lt;　C-v&gt; → 开始块操作</li>
<li>&lt;　C-d&gt; → 向下移动 &gt; (你也可以使用hjkl来移动光标，或是使用%，或是别的)</li>
<li>I— [ESC] → I是插入，插入“—”，按ESC键来为每一行生效。<br><img src="http://newtonblogimg.qiniudn.com/rectangular-blocks.gif" alt="Rectangular Blocks"></li>
</ul>
</blockquote>
<p>　　在Windows下的vim，你需要使用 &lt; C-q&gt; 而不是 &lt; C-v&gt; ，&lt; C-v&gt; 是拷贝剪贴板。</p>
<h3 id="自动提示">自动提示</h3>
<p>　　在 Insert 模式下，你可以输入一个词的开头，然后按 &lt; C-p&gt;或是&lt; C-n&gt;，自动补齐功能就出现了……</p>
<blockquote>
<p>　<img src="http://newtonblogimg.qiniudn.com/completion.gif" alt="Completion"></p>
</blockquote>
<h3 id="宏录制">宏录制</h3>
<blockquote>
<ul>
<li>qa 把你的操作记录在寄存器 a。</li>
<li>于是 @a 会replay被录制的宏。</li>
<li>@@ 是一个快捷键用来replay最新录制的宏。</li>
</ul>
</blockquote>
<hr>
<blockquote>
<p><em>示例</em><br>在一个只有一行且这一行只有“1”的文本中，键入如下命令：</p>
<ul>
<li><p>qaYp&lt; C-a&gt;q→</p>
<blockquote>
<p>:qa 开始录制<br>:Yp 复制行.<br>:&lt; C-a&gt; 增加1.<br>:q 停止录制.</p>
</blockquote>
</li>
<li><p>@a → 在1下面写下 2</p>
</li>
<li>@@ → 在2 正面写下3</li>
<li>现在做 100@@ 会创建新的100行，并把数据增加到 103.<br><img src="http://newtonblogimg.qiniudn.com/macros.gif" alt="Macros"></li>
</ul>
</blockquote>
<h3 id="可视化选择">可视化选择</h3>
<p>　　前面，我们看到了 <c-v>的示例 （在Windows下应该是<c-q>），我们可以使用 v 和 V。一但被选好了，你可以做下面的事：</c-q></c-v></p>
<blockquote>
<ul>
<li>J → 把所有的行连接起来（变成一行）</li>
<li>&lt; 或 &gt; → 左右缩进</li>
<li>= → 自动给缩进 （陈皓注：这个功能相当强大，我太喜欢了）<br><img src="http://newtonblogimg.qiniudn.com/autoindent.gif" alt="Auto Indent"></li>
</ul>
</blockquote>
<p>　　在所有被选择的行后加上点东西：</p>
<blockquote>
<ul>
<li><c-v></c-v></li>
<li>选中相关的行 (可使用 j 或 <c-d> 或是 /pattern 或是 % 等……)</c-d></li>
<li>$ 到行最后</li>
<li>A, 输入字符串，按 ESC。<br><img src="http://newtonblogimg.qiniudn.com/append-to-many-lines.gif" alt="Append to Many Lines"></li>
</ul>
</blockquote>
<h3 id="分屏">分屏</h3>
<p>　　下面是主要的命令，你可以使用VIM的帮助 :help split. 你可以参考本站以前的一篇文章VIM分屏。</p>
<blockquote>
<ul>
<li>:split → 创建分屏 (:vsplit创建垂直分屏)</li>
<li><c-w><dir> : dir就是方向，可以是 hjkl 或是 ←↓↑→ 中的一个，其用来切换分屏。</dir></c-w></li>
<li><c-w>_ (或 <c-w>|) : 最大化尺寸 (<c-w>| 垂直分屏)</c-w></c-w></c-w></li>
<li><c-w>+ (或 <c-w>-) : 增加尺寸<br><img src="http://newtonblogimg.qiniudn.com/split.gif" alt="Split"></c-w></c-w></li>
</ul>
</blockquote>
<hr>
<h2 id="Conclusion"><strong>Conclusion</strong></h2>
<p>　　上面是作者最常用的90%的命令。　<br>　　我建议你每天都学1到2个新的命令。<br>　　在两到三周后，你会感到vim的强大的。<br>　　有时候，学习VIM就像是在死背一些东西。<br>　　幸运的是，vim有很多很不错的工具和优秀的文档。<br>　　运行vimtutor直到你熟悉了那些基本命令。<br>　　其在线帮助文档中你应该要仔细阅读的是 :help usr_02.txt.<br>　　你会学习到诸如  !， 目录，寄存器，插件等很多其它的功能。<br>　　学习vim就像学弹钢琴一样，一旦学会，受益无穷。</p>
<hr>
<h2 id="Further_reading"><strong>Further reading</strong></h2>
<hr>
<p>　　from <a href="http://coolshell.cn/articles/5426.html" target="_blank" rel="external">@coolshell</a>     </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　vim的学习曲线相当的大<a href="http://coolshell.cn/articles/3125.html" target="_blank" rel="external">（参看各种文本编辑器的学习曲线）</a>，所以，如果你一开始看到的是一大堆VIM的命令]]>
    </summary>
    
      <category term="Linux" scheme="http://chenqx.github.com/tags/Linux/"/>
    
      <category term="Vim" scheme="http://chenqx.github.com/tags/Vim/"/>
    
      <category term="TextEditor" scheme="http://chenqx.github.com/tags/TextEditor/"/>
    
      <category term="Tools" scheme="http://chenqx.github.com/categories/Tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Cmd - An Effective Markdown Editor]]></title>
    <link href="http://chenqx.github.com/2014/10/28/Cmd-An-Effective-Markdown-Editor/"/>
    <id>http://chenqx.github.com/2014/10/28/Cmd-An-Effective-Markdown-Editor/</id>
    <published>2014-10-28T08:36:24.000Z</published>
    <updated>2014-10-29T00:25:28.000Z</updated>
    <content type="html"><![CDATA[<p>　　为了更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，<strong>Cmd Markdown</strong> 为我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。</p>
<p>　　您可以使用 Cmd Markdown：</p>
<blockquote>
<ul>
<li>整理知识，学习笔记</li>
<li>发布日记，杂文，所见所想</li>
<li>撰写发布技术文稿（代码支持）</li>
<li>撰写发布学术论文（LaTeX 公式支持）</li>
</ul>
</blockquote>
<hr>
<h2 id="什么是_Markdown">什么是 Markdown</h2>
<p>　　Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字，更棒的是，它还可以</p>
<h3 id="书写一个质能守恒公式[^LaTeX]">书写一个质能守恒公式[^LaTeX]</h3>
<p>　　$$E=mc^2$$</p>
<h3 id="高亮一段代码[^code]">高亮一段代码[^code]</h3>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="decorator">@requires_authorization</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="comment"># A comment</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'hello world'</span></div></pre></td></tr></table></figure>

<h3 id="高效绘制_流程图">高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图" target="_blank" rel="external">流程图</a></h3>
<figure class="highlight flow"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">st=&gt;<span class="symbol">start:</span> <span class="constant">Start</span></div><div class="line">op=&gt;<span class="symbol">operation:</span> <span class="constant">Your Operation</span></div><div class="line"><span class="keyword">cond</span>=&gt;<span class="symbol">condition:</span> <span class="constant">Yes </span><span class="keyword">or</span> <span class="constant">No?</span></div><div class="line">e=&gt;<span class="keyword">end</span></div><div class="line"></div><div class="line">st-&gt;op-&gt;<span class="keyword">cond</span></div><div class="line"><span class="keyword">cond</span>(yes)-&gt;e</div><div class="line"><span class="keyword">cond</span>(no)-&gt;op</div></pre></td></tr></table></figure>

<h3 id="高效绘制_序列图">高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图" target="_blank" rel="external">序列图</a></h3>
<figure class="highlight seq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="type">Alice</span>-&gt;<span class="type">Bob</span>: <span class="type">Hello</span> <span class="type">Bob</span>, how are you?</div><div class="line"><span class="type">Note</span> right <span class="keyword">of</span> <span class="type">Bob</span>: <span class="type">Bob</span> thinks</div><div class="line"><span class="type">Bob</span><span class="comment">--&gt;Alice: I am good thanks!</span></div></pre></td></tr></table></figure>

<h3 id="绘制表格">绘制表格</h3>
<table>
<thead>
<tr>
<th>项目</th>
<th style="text-align:right">价格</th>
<th style="text-align:center">数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>计算机</td>
<td style="text-align:right">$1600</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td>手机</td>
<td style="text-align:right">$12</td>
<td style="text-align:center">12</td>
</tr>
<tr>
<td>管线</td>
<td style="text-align:right">$1</td>
<td style="text-align:center">234</td>
</tr>
</tbody>
</table>
<h3 id="更详细语法说明">更详细语法说明</h3>
<p>　　想要查看更详细的语法说明，可以参考我们准备的 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown" target="_blank" rel="external">Cmd Markdown 简明语法手册</a>，进阶用户可以参考 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册" target="_blank" rel="external">Cmd Markdown 高阶语法手册</a> 了解更多高级功能。</p>
<p>　　总而言之，不同于其它 <em>所见即所得</em> 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。<strong>Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。</strong> 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。</p>
<hr>
<h2 id="什么是_Cmd_Markdown">什么是 Cmd Markdown</h2>
<p>　　您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 <strong>编辑/发布/阅读</strong> Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。</p>
<h3 id="实时同步预览">实时同步预览</h3>
<p>我们将 Cmd Markdown 的主界面一分为二，左边为<strong>编辑区</strong>，右边为<strong>预览区</strong>，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！</p>
<h3 id="编辑工具栏">编辑工具栏</h3>
<p>　　也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 <strong>编辑区</strong> 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。</p>
<p><img src="https://www.zybuluo.com/static/img/toolbar-editor.png" alt="tool-editor"></p>
<h3 id="编辑模式">编辑模式</h3>
<p>　　完全心无旁骛的方式编辑文字：点击 <strong>编辑工具栏</strong> 最右测的拉伸按钮或者按下 <code>Ctrl + M</code>，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！</p>
<h3 id="实时的云端文稿">实时的云端文稿</h3>
<p>　　为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 <strong>编辑工具栏</strong> 的最右侧提示 <code>已保存</code> 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。</p>
<h3 id="离线模式">离线模式</h3>
<p>　　在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。</p>
<h3 id="管理工具栏">管理工具栏</h3>
<p>　　为了便于管理您的文稿，在 <strong>预览区</strong> 的顶部放置了如下所示的 <strong>管理工具栏</strong>：</p>
<p><img src="https://www.zybuluo.com/static/img/toolbar-manager.jpg" alt="tool-manager"></p>
<p>　　通过管理工具栏可以：</p>
<p><i class="icon-share"></i> 　　发布：将当前的文稿生成固定链接，在网络上发布，分享<br><i class="icon-file"></i> 　　新建：开始撰写一篇新的文稿<br><i class="icon-trash"></i> 　　删除：删除当前的文稿<br><i class="icon-cloud"></i> 　　导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地<br><i class="icon-reorder"></i> 　　列表：所有新增和过往的文稿都可以在这里查看、操作<br><i class="icon-pencil"></i> 　　模式：切换 普通/Vim/Emacs 编辑模式</p>
<h3 id="阅读工具栏">阅读工具栏</h3>
<p><img src="https://www.zybuluo.com/static/img/toolbar-reader.jpg" alt="tool-manager"></p>
<p>　　通过 <strong>预览区</strong> 右上角的 <strong>阅读工具栏</strong>，可以查看当前文稿的目录并增强阅读体验。</p>
<p>工具栏上的五个图标依次为：</p>
<p><i class="icon-list"></i> 　　目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落<br><i class="icon-chevron-sign-left"></i> 　　视图：互换左边编辑区和右边预览区的位置<br><i class="icon-adjust"></i> 　　主题：内置了黑白两种模式的主题，试试 <strong>黑色主题</strong>，超炫！<br><i class="icon-desktop"></i> 　　阅读：心无旁骛的阅读模式提供超一流的阅读体验<br><i class="icon-fullscreen"></i> 　　全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境</p>
<h3 id="阅读模式">阅读模式</h3>
<p>　　在 <strong>阅读工具栏</strong> 点击 <i class="icon-desktop"></i> 或者按下 <code>Ctrl+Alt+M</code> 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。</p>
<h3 id="标签、分类和搜索">标签、分类和搜索</h3>
<p>　　在编辑区任意行首位置输入以下格式的文字可以标签当前文档：</p>
<p>　　标签： 未分类</p>
<p>　　标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：</p>
<p><img src="https://www.zybuluo.com/static/img/file-list.png" alt="file-list"></p>
<h3 id="文稿发布和分享">文稿发布和分享</h3>
<p>　　在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class="icon-share"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！</p>
<hr>
<p>See more <a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="external">@Cmdeditor</a>     </p>
<p>[^LaTeX]: 支持 <strong>LaTeX</strong> 编辑显示支持，例如：$\sum_{i=1}^n a_i=0$， 访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="external">MathJax</a> 参考更多使用方法。</p>
<p>[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，<strong>四十一</strong>种主流编程语言。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　为了更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，<strong>Cmd Markdown</strong> 为我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。</p>
<p>　　您可以使用 Cmd Markdown：</p>]]>
    </summary>
    
      <category term="Markdown" scheme="http://chenqx.github.com/tags/Markdown/"/>
    
      <category term="TextEditor" scheme="http://chenqx.github.com/tags/TextEditor/"/>
    
      <category term="Tools" scheme="http://chenqx.github.com/categories/Tools/"/>
    
  </entry>
  
</feed>
